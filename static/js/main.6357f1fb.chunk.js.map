{"version":3,"sources":["app/Theme.js","context/auth/AuthContext.js","context/indicators/IndicatorContext.js","auth/LoginDialog.js","auth/LoginButton.js","auth/LogoutButton.js","userMenu/UserMenu.js","context/chatty/ChattyContext.js","nav/RefreshButton.js","util/fetchJson.js","replyBox/ReplyBox.js","nav/NewThreadButton.js","nav/MessagesButton.js","context/filter/FilterContext.js","filter/EditableList.js","filter/FilterCheckbox.js","filter/FilterDialog.js","filter/FilterButton.js","nav/Nav.js","thread/PostExpirationBar.js","thread/PostDate.js","thread/PostAuthor.js","tags/tagData.js","tags/Tags.js","tags/TagButton.js","thread/PostBody.js","tags/WhoTaggedButton.js","thread/Post.js","util/bodyUtils.js","thread/OneLine.js","thread/Comments.js","thread/Thread.js","chatty/Chatty.js","app/App.js","context/auth/AuthProvider.js","context/chatty/ChattyProvider.js","context/indicators/AsyncLoadingIndicator.js","context/indicators/SyncLoadingIndicator.js","context/indicators/IndicatorProvider.js","context/clientData/ClientDataContext.js","context/filter/FilterProvider.js","history.js","context/clientData/ClientDataProvider.js","app/Root.js","index.js"],"names":["createMuiTheme","palette","type","primary","light","main","dark","secondary","typography","useNextVariants","React","createContext","LoginDialog","open","onClose","useState","username","setUsername","password","setPassword","login","useContext","AuthContext","setLoading","IndicatorContext","submit","event","a","preventDefault","Dialog","onSubmit","DialogTitle","DialogContent","TextField","autoFocus","margin","label","fullWidth","onChange","target","value","DialogActions","Button","onClick","LoginButton","setOpen","Fragment","logout","MenuItem","UserMenu","isLoggedIn","anchorEl","setAnchorEl","IconButton","size","keepMounted","disabled","Divider","LogoutButton","useStyles","makeStyles","badge","RefreshButton","classes","ChattyContext","newThreads","refreshChatty","displayBadge","length","title","handleClick","window","scrollTo","Tooltip","disableFocusListener","enterDelay","Badge","color","variant","anchorOrigin","vertical","horizontal","url","options","fetchJson","body","headers","querystring","stringify","fetch","res","ok","tryJson","status","statusText","result","console","error","Promise","reject","text","JSON","parse","card","backgroundColor","borderRadius","border","actions","flexRow","display","flexDirection","textarea","flex","padding","ReplyBox","onCloseReplyBox","parentId","className","showSnackbar","setText","posting","setPosting","handleSubmit","method","log","Card","classnames","CardHeader","CardContent","Input","multiline","disableUnderline","rows","placeholder","name","required","CardActions","dialogPaper","width","NewThreadButton","paper","top","MessagesButton","totalMessagesCount","setTotalMessagesCount","unreadMessagesCount","setUnreadMessagesCount","useEffect","getCounts","total","unread","id","setInterval","clearInterval","href","badgeContent","row","fill","container","marginTop","EditableList","editing","setEditing","itemText","setItemText","addItem","regex","RegExp","newItem","concat","ex","toLowerCase","onKeyPress","key","fontSize","Typography","disableRipple","List","dense","ListItem","ListItemText","map","item","ListItemSecondaryAction","itemToRemove","filter","checkbox","marginBottom","FilterCheckbox","checked","FormControlLabel","control","Checkbox","content","checkboxes","FilterDialog","FilterContext","filterSettings","updateFilterSettings","showCollapsed","setShowCollapsed","showFilteredTerms","setShowFilteredTerms","showFilteredUsers","setShowFilteredUsers","showNotWorkSafePosts","setShowNotWorkSafePosts","showStupidPosts","setShowStupidPosts","showOfftopicPosts","setShowOfftopicPosts","showPoliticalReligiousPosts","setShowPoliticalReligiousPosts","showCortexPosts","setShowCortexPosts","filteredTerms","setFilteredTerms","filteredUsers","setFilteredUsers","handleSave","FilterButton","rendered","setRendered","appBar","paddingRight","white","menuButton","marginLeft","marginRight","menuItem","textDecoration","Nav","drawerOpen","setDrawerOpen","closeDrawer","AppBar","elevation","Toolbar","Drawer","drawer","position","drawerAppBar","rel","wrapper","height","background","backgroundImage","backgroundSize","boxShadow","PostExpirationBar","date","now","Date","getTime","then","percent","Math","min","style","paddingTop","PostDate","parsed","parseISO","format","formatDistanceToNow","employees","mods","user","fontWeight","cursor","normal","self","op","mod","employee","PostAuthor","post","thread","author","isSameUser","one","two","left","replace","right","userClass","useMemo","find","nonBreakingAuthor","String","fromCharCode","supportedTags","tagsById","1","2","3","4","5","6","7","colorByTag","lol","inf","unf","tag","wtf","wow","aww","containerPost","containerOneline","whiteSpace","chip","nonChip","Tags","tags","fixedTags","validTags","includes","miscTagCount","reduce","acc","count","Chip","TagButton","postId","toUpperCase","handleTag","tagPost","message","response","warn","who","what","action","PostBody","html","__html","dangerouslySetInnerHTML","theme","button","list","maxWidth","overflow","maxHeight","li","ul","WhoTaggedButton","data","setData","useCallback","currentTarget","formatted","usernames","lols","Popover","transformOrigin","subheader","Object","keys","ListSubheader","bgColor","replyBorder","replyBox","tagNws","borderLeft","tagInformative","tagFrontpage","header","toolbarButton","collapsed","pinned","Post","onCollapse","onHide","onPinned","replyBoxOpenForId","onOpenReplyBox","domElement","useRef","isPostVisible","tagClass","category","test","isReply","isCollapsed","markType","handleHide","rect","current","getBoundingClientRect","viewHeight","max","document","documentElement","clientHeight","innerHeight","above","bottom","below","offsetTop","behavior","ref","disableSpacing","cleanAllStyles","separator","oneline","textOverflow","oneline10","oneline9","oneline8","oneline7","oneline6","oneline5","oneline4","oneline3","oneline2","oneline1","OneLine","onExpandReply","lineClass","recentReplyNumber","input","cleanMostStyles","i","len","char","output","slice","trim","getSnippet","Comments","parent","onCollapseReply","expandedReplyId","comments","posts","truncatedMessage","borderTop","borderBottom","replyCount","truncatedContainer","truncatedComments","memo","rawThread","setExpandedReplyId","setReplyBoxOpenForId","setMarkType","revision","setRevision","reverse","forEach","index","threadId","visibleReplyCount","visiblePosts","sort","b","visiblePostIds","0","truncated","setTruncated","markPost","markThread","handleExpandReply","handleCollapseReply","handleOpenReplyBox","handleCloseReplyBox","handleCollapse","togglePinned","chatty","font","Chatty","threads","App","path","component","AuthProvider","children","storageValue","localStorage","getItem","removeItem","credentials","setCredentials","isValid","setItem","contextValue","Provider","ChattyProvider","chattyRef","lastUsername","chattyValue","setChattyValue","lastEventId","setLastEventId","getMarkedPosts","encodeURIComponent","markedPosts","updateThreads","freshThreads","freshMarkedPosts","includeNewThreads","getChatty","nextThreads","nextNewThreads","markedPostsById","maxPostIdByThread","expireDate","subHours","isBefore","ids","markedPost","some","resolve","threadCount","handleEvent","eventType","eventData","addReply","p","found","t","updateCategory","updates","updatedPostsById","updateTags","updated","debug","fullReload","eventId","setTimeout","mounted","waitForEvent","newerEventId","events","refreshForNewUser","progress","zIndex","AsyncLoadingIndicator","loading","LinearProgress","SyncLoadingIndicator","CircularProgress","thickness","IndicatorProvider","enqueueSnackbar","useSnackbar","defaultSettings","FilterProvider","ClientDataContext","clientData","updateClientData","setFilterSettings","updateCloudFilterSettings","cloudFilterSettings","whichValue","prop","otherwise","hasOwnProperty","isCortex","updatedSettings","newFilterSettings","history","client","ClientDataProvider","setClientData","newClientData","params","loadClientData","Root","Component","ThemeProvider","Theme","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6357f1fb.chunk.js","sourcesContent":["import createMuiTheme from '@material-ui/core/styles/createMuiTheme'\n\nexport default createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            light: '#6fbf73',\n            main: '#357a38',\n            dark: '#357a38'\n        },\n        secondary: {\n            light: '#33eaff',\n            main: '#00e5ff',\n            dark: '#00a0b2'\n        }\n    },\n    typography: {\n        useNextVariants: true\n    }\n})\n","import React from 'react'\n\nexport default React.createContext({})\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext, useState} from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport AuthContext from '../context/auth/AuthContext'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\n\nfunction LoginDialog({open, onClose}) {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const {login} = useContext(AuthContext)\n    const {setLoading} = useContext(IndicatorContext)\n\n    const submit = async event => {\n        event.preventDefault()\n\n        try {\n            setLoading('sync')\n\n            await login(username, password)\n\n            onClose()\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <form onSubmit={submit}>\n                <DialogTitle>Log in</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin='dense'\n                        label='Username'\n                        type='text'\n                        fullWidth\n                        onChange={event => setUsername(event.target.value)}\n                    />\n                    <TextField\n                        margin='dense'\n                        label='Password'\n                        type='password'\n                        fullWidth\n                        onChange={event => setPassword(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClose}>Cancel</Button>\n                    <Button type='submit'>Log in</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    )\n}\n\nexport default LoginDialog\n","import React, {useState} from 'react'\nimport Button from '@material-ui/core/Button'\nimport LoginDialog from './LoginDialog'\n\nfunction LoginButton() {\n    const [open, setOpen] = useState(false)\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen(true)}>Log in</Button>\n\n            <LoginDialog open={open} onClose={() => setOpen(false)}/>\n        </React.Fragment>\n    )\n}\n\nexport default LoginButton\n","import React, {useContext} from 'react'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction LoginButton({onClick}) {\n    const {logout} = useContext(AuthContext)\n    const handleClick = () => {\n        onClick && onClick()\n        logout()\n    }\n    return <MenuItem onClick={handleClick}>Logout</MenuItem>\n}\n\nexport default LoginButton\n","import React, {useContext, useState} from 'react'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport LoginButton from '../auth/LoginButton'\nimport LogoutButton from '../auth/LogoutButton'\nimport IconButton from '@material-ui/core/IconButton'\nimport Divider from '@material-ui/core/Divider'\nimport PersonIcon from '@material-ui/icons/Person'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction UserMenu() {\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    if (!isLoggedIn) return <LoginButton/>\n    return (\n        <React.Fragment>\n            <IconButton size=\"small\" onClick={event => setAnchorEl(event.target)}>\n                <PersonIcon/>\n            </IconButton>\n\n            {anchorEl && <Menu\n                keepMounted\n                open={!!anchorEl}\n                anchorEl={anchorEl}\n                onClose={() => setAnchorEl(null)}\n            >\n                <MenuItem disabled>{username}</MenuItem>\n                <Divider/>\n                <LogoutButton onClick={() => setAnchorEl(null)}/>\n            </Menu>}\n        </React.Fragment>\n    )\n}\n\nexport default UserMenu\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport Badge from '@material-ui/core/Badge'\nimport ChattyContext from '../context/chatty/ChattyContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction RefreshButton() {\n    const classes = useStyles()\n    const {newThreads, refreshChatty} = useContext(ChattyContext)\n    const displayBadge = newThreads && newThreads.length > 0\n    const title = displayBadge ? `Refresh Thread Order (${newThreads.length} new threads)` : 'Refresh Thread Order'\n\n    const handleClick = async () => {\n        await refreshChatty()\n        window.scrollTo(0, 0)\n    }\n\n    return (\n        <Tooltip disableFocusListener title={title} enterDelay={350}>\n            <IconButton size=\"small\" onClick={handleClick}>\n                {\n                    displayBadge\n                        ? <Badge\n                            color='secondary'\n                            classes={{badge: classes.badge}}\n                            variant='dot'\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'left'\n                            }}\n                        >\n                            <RefreshIcon/>\n                        </Badge>\n                        : <RefreshIcon/>\n                }\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nconst useStyles = makeStyles({\n    badge: {\n        //top: 12\n    }\n})\n\nexport default RefreshButton\n","import querystring from 'querystring'\n\nconst base = 'https://winchatty.com/v2'\n\nexport default async (url, options) => fetchJson(`${base}/${url}`, options)\n\nexport const fetchJson = async (url, options = {}) => {\n    if (options.body) {\n        options = {\n            ...options,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...options.headers\n            },\n            body: querystring.stringify(options.body)\n        }\n    }\n    let res = await fetch(url, options)\n    if (res.ok) {\n        return await tryJson(res)\n    } else {\n        let body = await tryJson(res)\n        let {status, statusText} = res\n        let result = {status, statusText, body}\n        console.error('Http Error:', result)\n        return Promise.reject(result)\n    }\n}\n\nconst tryJson = async res => {\n    let text = await res.text()\n    try {\n        return JSON.parse(text)\n    } catch (ex) {\n        return text\n    }\n}\n","import React, {useContext, useState} from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport fetchJson from '../util/fetchJson'\nimport classnames from 'classnames'\nimport AuthContext from '../context/auth/AuthContext'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction ReplyBox({onCloseReplyBox, parentId, className}) {\n    const classes = useStyles()\n    const {username, password} = useContext(AuthContext)\n    const {setLoading, showSnackbar} = useContext(IndicatorContext)\n    const [text, setText] = useState('')\n    const [posting, setPosting] = useState(false)\n\n    const handleSubmit = async () => {\n        try {\n            setLoading('async')\n            setPosting(true)\n            let response = await fetchJson('postComment', {method: 'POST', body: {username, password, parentId, text}})\n            if (response.result === 'success') {\n                onCloseReplyBox()\n            }\n        } catch (ex) {\n            console.log('Error while posting comment', ex)\n            showSnackbar('Error while posting. Please try again later.', {variant: 'error'})\n            setPosting(false)\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <Card className={classnames(className, classes.card)}>\n            {parentId === 0 && <CardHeader title='New Thread'/>}\n            <CardContent>\n                <div className={classes.flexRow}>\n                    <Input\n                        multiline\n                        autoFocus\n                        disableUnderline\n                        rows={5}\n                        fullWidth\n                        className={classes.textarea}\n                        placeholder='Type something interesting...'\n                        name='replyBody'\n                        required\n                        disabled={posting}\n                        onChange={event => setText(event.target.value)}\n                    />\n                </div>\n            </CardContent>\n            <CardActions className={classes.actions}>\n                <Button\n                    color='primary'\n                    variant='outlined'\n                    disabled={posting || !text.length}\n                    onClick={handleSubmit}\n                >Post\n                </Button>\n                <Button\n                    variant='outlined'\n                    disabled={posting}\n                    onClick={onCloseReplyBox}\n                >Cancel\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nconst useStyles = makeStyles({\n    card: {\n        backgroundColor: '#202224',\n        borderRadius: 0,\n        border: '1px solid #656565'\n    },\n    actions: {\n        margin: '-8px 0 8px 8px'\n    },\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    textarea: {\n        flex: 1,\n        backgroundColor: '#000',\n        padding: 4\n    }\n})\n\nexport default ReplyBox\n","import React, {useContext, useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport AddIcon from '../../node_modules/@material-ui/icons/Add'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Dialog from '@material-ui/core/Dialog'\nimport ReplyBox from '../replyBox/ReplyBox'\nimport AuthContext from '../context/auth/AuthContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction NewThreadButton() {\n    const classes = useStyles()\n    const {isLoggedIn} = useContext(AuthContext)\n    const [open, setOpen] = useState(false)\n    if (!isLoggedIn) return null\n\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='New Thread' enterDelay={350}>\n                <IconButton size=\"small\" onClick={() => setOpen(true)}>\n                    <AddIcon/>\n                </IconButton>\n            </Tooltip>\n            <Dialog\n                open={open}\n                onClose={() => setOpen(false)}\n                classes={{paper: classes.dialogPaper}}\n            >\n                <ReplyBox\n                    parentId={0}\n                    onCloseReplyBox={() => setOpen(false)}\n                />\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles({\n    dialogPaper: {\n        width: '85vw'\n    }\n})\n\nexport default NewThreadButton\n","import React, {useContext, useEffect, useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport MessageIcon from '@material-ui/icons/Message'\nimport Badge from '@material-ui/core/Badge'\nimport {makeStyles} from '@material-ui/styles'\nimport fetchJson from '../util/fetchJson'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction MessagesButton() {\n    const classes = useStyles()\n    const {isLoggedIn, username, password} = useContext(AuthContext)\n\n    const [totalMessagesCount, setTotalMessagesCount] = useState(0)\n    const [unreadMessagesCount, setUnreadMessagesCount] = useState(0)\n\n    const displayBadge = unreadMessagesCount > 0\n    const title = `( ${unreadMessagesCount} / ${totalMessagesCount} ) unread messages`\n\n    // update counts every 15 minutes\n    useEffect(() => {\n        const getCounts = async () => {\n            if (isLoggedIn) {\n                const options = {method: 'POST', body: {username, password}}\n                const {total, unread} = await fetchJson('getMessageCount', options)\n                setTotalMessagesCount(total)\n                setUnreadMessagesCount(unread)\n            }\n        }\n        \n        getCounts()\n\n        const id = setInterval(() => getCounts(), 15 * 60 * 1000)\n        return () => clearInterval(id)\n    }, [isLoggedIn, password, username])\n\n    if (!isLoggedIn) return null\n    return (\n        <Tooltip disableFocusListener title={title} enterDelay={350}>\n            <IconButton size=\"small\" href='https://www.shacknews.com/messages' target='_blank'>\n                {\n                    displayBadge\n                        ? <Badge\n                            badgeContent={unreadMessagesCount}\n                            color='secondary'\n                            classes={{badge: classes.badge}}\n                        >\n                            <MessageIcon/>\n                        </Badge>\n                        : <MessageIcon/>\n                }\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nconst useStyles = makeStyles({\n    badge: {\n        top: 12\n    }\n})\n\nexport default MessagesButton\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext, useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Typography from '@material-ui/core/Typography'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport CheckIcon from '@material-ui/icons/Check'\nimport CloseIcon from '@material-ui/icons/Close'\nimport AddIcon from '@material-ui/icons/Add'\nimport TextField from '@material-ui/core/TextField'\nimport {makeStyles} from '@material-ui/styles'\nimport classnames from 'classnames'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\n\nfunction EditableList({title, value, onChange}) {\n    const classes = useStyles()\n    const [editing, setEditing] = useState(false)\n    const [itemText, setItemText] = useState('')\n    const {showSnackbar} = useContext(IndicatorContext)\n\n    // TODO: This function doesn't make sense in a generic EditableList\n    const addItem = () => {\n        try {\n            if (itemText.length) {\n                const regex = new RegExp(itemText, 'gmi')\n                const newItem = {text: itemText, regex}\n                onChange && onChange(value.concat([newItem]))\n                setEditing(false)\n                setItemText('')\n            }\n        } catch (ex) {\n            showSnackbar('Invalid filter term.', {variant: 'error'})\n            console.error('Error processing new filter value', itemText, ex)\n        }\n    }\n    const removeItem = itemToRemove => onChange && onChange(value.filter(item => item !== itemToRemove))\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.row}>\n                {\n                    editing ?\n                        <React.Fragment>\n                            <TextField\n                                placeholder={`Add new ${title.toLowerCase()}`}\n                                margin='none'\n                                autoFocus\n                                className={classes.fill}\n                                value={itemText}\n                                onKeyPress={event => event.key === 'Enter' && addItem(itemText)}\n                                onChange={event => setItemText(event.target.value)}\n                            />\n                            <IconButton onClick={() => addItem()}>\n                                <CheckIcon fontSize='small'/>\n                            </IconButton>\n                            <IconButton onClick={() => setEditing(false)}>\n                                <CloseIcon fontSize='small'/>\n                            </IconButton>\n                        </React.Fragment>\n                        :\n                        <React.Fragment>\n                            <Typography variant='subtitle1' className={classnames(classes.title, classes.fill)}>\n                                {title}s\n                            </Typography>\n\n                            <IconButton disableRipple onClick={() => setEditing(true)}>\n                                <AddIcon fontSize='small'/>\n                            </IconButton>\n                        </React.Fragment>\n                }\n            </div>\n            <List dense>\n                {\n                    value.length === 0 &&\n                    <ListItem dense>\n                        <ListItemText primary='List is empty.'/>\n                    </ListItem>\n                }\n                {value.length > 0 && value.map((item, key) =>\n                    <ListItem key={key} dense>\n                        <ListItemText primary={item.text}/>\n                        <ListItemSecondaryAction>\n                            <IconButton onClick={() => removeItem(item)}>\n                                <DeleteIcon fontSize='small'/>\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                )}\n            </List>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    row: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    fill: {\n        display: 'flex',\n        flex: 1\n    },\n    container: {\n        marginTop: 12\n    },\n    title: {\n        marginTop: 6\n    }\n})\n\nexport default EditableList\n","import React from 'react'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction FilterCheckbox({label, checked, onChange}) {\n    const classes = useStyles()\n    return (\n        <FormControlLabel\n            label={label}\n            className={classes.checkbox}\n            control={\n                <Checkbox\n                    checked={checked}\n                    onChange={onChange}\n                />\n            }\n        />\n    )\n}\n\nconst useStyles = makeStyles({\n    checkbox: {\n        marginBottom: -12\n    }\n})\n\nexport default FilterCheckbox\n","import React, {useContext, useState} from 'react'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Dialog from '@material-ui/core/Dialog'\nimport Button from '@material-ui/core/Button'\nimport FilterContext from '../context/filter/FilterContext'\nimport Typography from '@material-ui/core/Typography'\nimport EditableList from './EditableList'\nimport FilterCheckbox from './FilterCheckbox'\nimport {makeStyles} from '@material-ui/styles'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\n\nfunction FilterDialog({open, onClose}) {\n    const classes = useStyles()\n    const {filterSettings, updateFilterSettings} = useContext(FilterContext)\n    const {setLoading} = useContext(IndicatorContext)\n    const [showCollapsed, setShowCollapsed] = useState(filterSettings.showCollapsed)\n    const [showFilteredTerms, setShowFilteredTerms] = useState(filterSettings.showFilteredTerms)\n    const [showFilteredUsers, setShowFilteredUsers] = useState(filterSettings.showFilteredUsers)\n    const [showNotWorkSafePosts, setShowNotWorkSafePosts] = useState(filterSettings.showNotWorkSafePosts)\n    const [showStupidPosts, setShowStupidPosts] = useState(filterSettings.showStupidPosts)\n    const [showOfftopicPosts, setShowOfftopicPosts] = useState(filterSettings.showOfftopicPosts)\n    const [showPoliticalReligiousPosts, setShowPoliticalReligiousPosts] = useState(filterSettings.showPoliticalReligiousPosts)\n    const [showCortexPosts, setShowCortexPosts] = useState(filterSettings.showCortexPosts)\n    const [filteredTerms, setFilteredTerms] = useState(filterSettings.filteredTerms)\n    const [filteredUsers, setFilteredUsers] = useState(filterSettings.filteredUsers)\n\n    const handleSave = async () => {\n        try {\n            setLoading('sync')\n            await updateFilterSettings({\n                showCollapsed,\n                showFilteredTerms,\n                showFilteredUsers,\n                showNotWorkSafePosts,\n                showStupidPosts,\n                showOfftopicPosts,\n                showPoliticalReligiousPosts,\n                showCortexPosts,\n                filteredTerms,\n                filteredUsers\n            })\n            onClose()\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>Filter Settings</DialogTitle>\n            <DialogContent className={classes.content}>\n                <Typography variant='caption' color='textSecondary'>\n                    These settings adjust what posts display in the chatty. Filtered keywords will hide any\n                    posts that match. Filtered users will hide any posts or replies by that user. Terms support full\n                    regular expressions. Checking a checkbox will show posts even if they match that criteria.\n                </Typography>\n\n                <EditableList title='Term' value={filteredTerms} onChange={value => setFilteredTerms(value)}/>\n                <EditableList title='User' value={filteredUsers} onChange={value => setFilteredUsers(value)}/>\n\n                <div className={classes.checkboxes}>\n                    <FilterCheckbox\n                        label='Show Not Work Safe Posts'\n                        checked={showNotWorkSafePosts}\n                        onChange={() => setShowNotWorkSafePosts(!showNotWorkSafePosts)}\n                    />\n                    <FilterCheckbox\n                        label='Show Stupid Posts'\n                        checked={showStupidPosts}\n                        onChange={() => setShowStupidPosts(!showStupidPosts)}\n                    />\n                    <FilterCheckbox\n                        label='Show Offtopic Posts'\n                        checked={showOfftopicPosts}\n                        onChange={() => setShowOfftopicPosts(!showOfftopicPosts)}\n                    />\n                    <FilterCheckbox\n                        label='Show Political / Religious Posts'\n                        checked={showPoliticalReligiousPosts}\n                        onChange={() => setShowPoliticalReligiousPosts(!showPoliticalReligiousPosts)}\n                    />\n                    <FilterCheckbox\n                        label='Show Cortex Posts'\n                        checked={showCortexPosts}\n                        onChange={() => setShowCortexPosts(!showCortexPosts)}\n                    />\n                </div>\n\n                <div className={classes.checkboxes}>\n                    <FilterCheckbox\n                        label='Show Collapsed Threads/Posts'\n                        checked={showCollapsed}\n                        onChange={() => setShowCollapsed(!showCollapsed)}\n                    />\n                    <FilterCheckbox\n                        label='Show Filtered Terms'\n                        checked={showFilteredTerms}\n                        onChange={() => setShowFilteredTerms(!showFilteredTerms)}\n                    />\n                    <FilterCheckbox\n                        label='Show Filtered Users'\n                        checked={showFilteredUsers}\n                        onChange={() => setShowFilteredUsers(!showFilteredUsers)}\n                    />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>Cancel</Button>\n                <Button onClick={handleSave}>Save</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nconst useStyles = makeStyles({\n    content: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: 300\n    },\n    checkboxes: {\n        marginTop: 12\n    }\n})\n\nexport default FilterDialog\n","import React, {useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton/IconButton'\nimport FilterListIcon from '@material-ui/icons/FilterList'\nimport Tooltip from '@material-ui/core/Tooltip/Tooltip'\nimport FilterDialog from './FilterDialog'\n\nfunction FilterButton() {\n    const [open, setOpen] = useState(false)\n    const [rendered, setRendered] = useState(false)\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='Filter Settings' enterDelay={350}>\n                <IconButton size=\"small\" onClick={() => setOpen(true) || setRendered(true)}>\n                    <FilterListIcon/>\n                </IconButton>\n            </Tooltip>\n\n            {rendered && <FilterDialog open={open} onClose={() => setOpen(false)}/>}\n        </React.Fragment>\n    )\n}\n\nexport default FilterButton\n","import React, {useState} from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Typography from '@material-ui/core/Typography'\nimport UserMenu from '../userMenu/UserMenu'\nimport RefreshButton from './RefreshButton'\nimport NewThreadButton from './NewThreadButton'\nimport MessagesButton from './MessagesButton'\nimport FilterButton from '../filter/FilterButton'\nimport Drawer from '@material-ui/core/Drawer'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction Nav() {\n    const classes = useStyles()\n    const [drawerOpen, setDrawerOpen] = useState(false)\n    const closeDrawer = () => setDrawerOpen(false)\n\n    return (\n        <React.Fragment>\n            <AppBar elevation={0}>\n                <Toolbar variant=\"dense\" className={classes.appBar}>\n                    <IconButton size=\"small\" className={classes.menuButton} onClick={() => setDrawerOpen(!drawerOpen)}>\n                        <MenuIcon className={classes.white}/>\n                    </IconButton>\n\n                    <Typography variant=\"h5\" className={classes.title}>Chatty</Typography>\n\n                    <RefreshButton/>\n                    <NewThreadButton/>\n                    <FilterButton/>\n                    <MessagesButton/>\n                    <UserMenu/>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer open={drawerOpen} onClose={closeDrawer} className={classes.drawer}>\n                <AppBar position=\"static\" color=\"primary\" className={classes.drawerAppBar}>\n                    <Toolbar variant=\"dense\">\n                        <Typography variant=\"h6\" className={classes.title}>Latest Chatty</Typography>\n                    </Toolbar>\n                </AppBar>\n\n                <a\n                    href=\"https://github.com/latestchatty/chatty\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={classes.menuItem}>\n                    <MenuItem onClick={closeDrawer}>Contribute</MenuItem>\n                </a>\n                <a\n                    href=\"https://github.com/latestchatty/chatty/issues\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={classes.menuItem}>\n                    <MenuItem onClick={closeDrawer}>Feedback</MenuItem>\n                </a>\n            </Drawer>\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles({\n    appBar: {\n        paddingRight: 8\n    },\n    white: {\n        color: '#fff'\n    },\n    title: {\n        color: '#fff',\n        flex: 1\n    },\n    menuButton: {\n        marginLeft: -15,\n        marginRight: 8\n    },\n    menuItem: {\n        textDecoration: 'none',\n        color: 'inherit'\n    }\n})\n\nexport default Nav\n","import React from 'react'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction PostExpirationBar({date}) {\n    const classes = useStyles()\n    const now = (new Date().getTime())\n    const then = new Date(date).getTime()\n    const percent = Math.min((((now - then) / 3600000) / 18) * 100, 100)\n\n    let backgroundColor = 'red'\n    if (percent <= 25) {\n        backgroundColor = 'springgreen'\n    } else if (percent <= 50) {\n        backgroundColor = 'yellow'\n    } else if (percent <= 75) {\n        backgroundColor = 'orange'\n    }\n\n    return (\n        <div className={classes.wrapper}>\n            <div\n                className={classes.value}\n                style={{width: `${percent}%`, backgroundColor}}\n            />\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: 8,\n        width: 48,\n        margin: 7,\n        background:\n            `rgb(221, 221, 221) -webkit-gradient(\n                linear,\n                0% 0%,\n                0% 100%,\n                from(rgb(170, 170, 170)),\n                color-stop(0.4, rgb(204, 204, 204)),\n                color-stop(0.6, rgb(204, 204, 204)),\n                to(rgb(238, 238, 238))\n            )`\n    },\n    value: {\n        height: 8,\n        backgroundImage:\n            `-webkit-gradient(\n                linear,\n                0 100%,\n                100% 0,\n                color-stop(0.25, rgba(255, 255, 255, 0.4)),\n                color-stop(0.25, transparent),\n                color-stop(0.5, transparent),\n                color-stop(0.5, rgba(255, 255, 255, 0.4)),\n                color-stop(0.75, rgba(255, 255, 255, 0.4)),\n                color-stop(0.75, transparent),\n                to(transparent)\n            )`,\n        backgroundSize: '25px 25px',\n        boxShadow: 'rgba(255, 255, 255, 0.298039) 0 2px 4px inset, rgba(0, 0, 0, 0.4) 0 -2px 3px inset'\n    }\n})\n\nexport default PostExpirationBar\n","import React from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport format from 'date-fns/format'\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow'\nimport parseISO from 'date-fns/parseISO'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction PostDate({date}) {\n    const classes = useStyles()\n    const parsed = parseISO(date)\n    return (\n        <Tooltip disableFocusListener title={format(parsed, 'MMM dd, yyyy h:mma')} enterDelay={350}>\n            <div className={classes.date}>{formatDistanceToNow(parsed)} ago</div>\n        </Tooltip>\n    )\n}\n\nconst useStyles = makeStyles({\n    date: {\n        fontSize: 10,\n        color: '#888',\n        paddingTop: 3,\n        marginRight: 3\n    }\n})\n\nexport default PostDate\n","import React, {useContext, useMemo} from 'react'\nimport classnames from 'classnames'\nimport AuthContext from '../context/auth/AuthContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction PostAuthor({post = {}, thread = {}}) {\n    const classes = useStyles()\n    const {username} = useContext(AuthContext)\n    const {author = ''} = post\n\n    const isSameUser = (one = '', two = '') => {\n        const left = one.toLowerCase().replace(/\\s/g, '')\n        const right = two.toLowerCase().replace(/\\s/g, '')\n        return left === right\n    }\n\n    const userClass = useMemo(() => {\n        if (username && isSameUser(author, username)) return 'self'\n        else if (thread.id !== post.id && isSameUser(thread.author, author)) return 'op'\n        else if (employees.find(employee => isSameUser(employee, author))) return 'employee'\n        else if (mods.find(mod => isSameUser(mod, author))) return 'mod'\n        return 'normal'\n    }, [username, author, thread.id, post.id, thread.author])\n\n    // Don't let the browser line break in the middle of author name\n    const nonBreakingAuthor = useMemo(() => author.replace(/\\s/g, String.fromCharCode(160)), [author])\n\n    return (\n        <span className={classnames(classes.user, classes[userClass])}>\n            {nonBreakingAuthor}\n        </span>\n    )\n}\n\nconst employees = [\n    'themanwiththebriefcase',\n    'shacknews'\n]\nconst mods = []\n\nconst useStyles = makeStyles({\n    user: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline'\n        }\n    },\n    normal: {\n        color: '#f3e7b5'\n    },\n    self: {\n        color: '#6cf'\n    },\n    op: {\n        color: '#6aff94'\n    },\n    mod: {\n        color: '#d20000'\n    },\n    employee: {\n        color: '#9370db'\n    }\n})\n\nexport default PostAuthor\n","export const supportedTags = ['lol', 'inf', 'unf', 'tag', 'wtf', 'wow', 'aww']\n\nexport const tagsById = {\n    1: 'lol',\n    2: 'inf',\n    3: 'unf',\n    4: 'tag',\n    5: 'wtf',\n    6: 'wow',\n    7: 'aww'\n}\n\nexport const colorByTag = {\n    lol: '#f80',\n    inf: '#09c',\n    unf: '#eb0000',\n    tag: '#7b2',\n    wtf: '#c000c0',\n    wow: '#c4a3b3',\n    aww: '#13a4a7'\n}\n","import React, {useMemo} from 'react'\nimport Chip from '@material-ui/core/Chip'\nimport {supportedTags, colorByTag} from './tagData'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction Tags({tags = [], variant}) {\n    const classes = useStyles()\n    const fixedTags = useMemo(() => {\n        const validTags = tags.filter(tag => supportedTags.includes(tag.tag))\n        const miscTagCount = tags.filter(tag => !supportedTags.includes(tag.tag))\n            .reduce((acc, tag) => acc + tag.count, 0)\n        return [\n            ...validTags,\n            {tag: 'tag', count: miscTagCount}\n        ]\n    }, [tags])\n\n    return (\n        <div className={variant === 'post' ? classes.containerPost : classes.containerOneline}>\n            {fixedTags.map(({tag, count}) => {\n                if (count < 1) return null\n                else if (variant === 'post') {\n                    return (\n                        <Chip\n                            key={tag}\n                            className={classes.chip}\n                            style={{\n                                color: colorByTag[tag],\n                                border: `1px solid ${colorByTag[tag]}`\n                            }}\n                            label={`${count} ${tag}`}\n                            variant='outlined'\n                        />\n                    )\n                } else if (variant === 'oneline') {\n                    return (\n                        <span key={tag} className={classes.nonChip} style={{color: colorByTag[tag]}}>\n                            {`${count} ${tag}`}\n                        </span>\n                    )\n                }\n                return null\n            })}\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    containerPost: {\n        marginLeft: 12\n    },\n    containerOneline: {\n        marginLeft: 4,\n        whiteSpace: 'nowrap'\n    },\n    chip: {\n        height: 16,\n        marginTop: 2,\n        marginRight: 6,\n        fontSize: 10\n    },\n    nonChip: {\n        marginRight: 4,\n        fontSize: 9\n    }\n})\n\nexport default Tags\n","import React, {useContext, useState} from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport LabelIcon from '@material-ui/icons/Label'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport AuthContext from '../context/auth/AuthContext'\nimport {supportedTags} from './tagData'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\nimport fetchJson from '../util/fetchJson'\n\nfunction TagButton({className, postId}) {\n    const {isLoggedIn, username, password} = useContext(AuthContext)\n    const {setLoading, showSnackbar} = useContext(IndicatorContext)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    const tags = supportedTags.map(tag => tag.toUpperCase())\n\n    const handleTag = async tag => {\n        try {\n            setLoading('async')\n            setAnchorEl(null)\n\n            let {message, status} = await tagPost(username, postId, tag, 'tag')\n            if (message.includes('Already tagged')) {\n                const response = await tagPost(username, postId, tag, 'untag')\n                status = response.status\n            }\n            if (!status !== '1') {\n                console.warn('Error tagging post', message)\n            }\n        } catch (err) {\n            console.error('Exception while tagging post', err)\n            showSnackbar('Error while tagging post. Please try again later.', {variant: 'error'})\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const tagPost = async (who, what, tag, action) => {\n        const body = {who, what, tag, password, action}\n        return fetchJson(`lol`, {method: 'POST', body})\n    }\n\n    if (!isLoggedIn) return null\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='Tag Post' enterDelay={350}>\n                <LabelIcon className={className} onClick={event => setAnchorEl(event.target)}/>\n            </Tooltip>\n\n            {\n                anchorEl && <Menu\n                    keepMounted\n                    open={!!anchorEl}\n                    anchorEl={anchorEl}\n                    onClose={() => setAnchorEl(null)}\n                >\n                    {tags.map(tag => <MenuItem key={tag} onClick={() => handleTag(tag)}>{tag}</MenuItem>)}\n                </Menu>\n            }\n        </React.Fragment>\n    )\n}\n\nexport default TagButton\n","import React, {useMemo} from 'react'\n\nfunction PostBody({post}) {\n    const html = useMemo(() => {\n        let fixed = post.body\n\n        if (post.author === 'Shacknews') {\n            fixed = post.body.replace('href=\"/', 'href=\"https://www.shacknews.com/')\n        }\n        fixed = post.body.replace('<a href=', '<a target=\"_blank\" rel=\"noopener noreferrer\" href=')\n\n        // TODO: search for embeddable urls here\n\n        return {__html: fixed}\n    }, [post.body, post.author])\n\n    return (\n        <span dangerouslySetInnerHTML={html}/>\n    )\n}\n\nexport default PostBody\n","import React, {useCallback, useContext, useState} from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport RecordVoiceOverOutlinedIcon from '@material-ui/icons/RecordVoiceOverOutlined'\nimport makeStyles from '@material-ui/styles/makeStyles'\nimport Popover from '@material-ui/core/Popover'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\nimport {tagsById, colorByTag} from './tagData'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport fetchJson from '../util/fetchJson'\n\nconst ENABLE_FEATURE = false\n\nfunction WhoTaggedButton({post}) {\n    const classes = useStyles()\n    const [anchorEl, setAnchorEl] = useState(null)\n    const [data, setData] = useState({})\n    const {setLoading, showSnackbar} = useContext(IndicatorContext)\n\n    const handleClose = () => setAnchorEl(null)\n\n    const handleClick = useCallback(async ({currentTarget}) => {\n        // TODO: Enable once API is available on WinChatty\n        if (!ENABLE_FEATURE) {\n            showSnackbar('This feature is under development, and will be available soon, check back later!.', {variant: 'info'})\n            return null\n        }\n\n        try {\n            setLoading('async')\n\n            const result = await fetchJson(`getLolTaggers?id=${post.id}`)\n            const formatted = result.reduce((acc, {tag, usernames}) => {\n                const key = tagsById[tag]\n                acc[key] = usernames\n                return acc\n            }, {})\n            setData(formatted)\n            setAnchorEl(currentTarget)\n        } catch (err) {\n            console.error('Error while getting tagger names.', err)\n            showSnackbar('Error while getting tagger names. Please try again later.', {variant: 'error'})\n        } finally {\n            setLoading(false)\n        }\n    }, [post.id, setLoading, showSnackbar])\n\n    if (post.lols.length === 0) return null\n    return (\n        <React.Fragment>\n            <Tooltip\n                disableFocusListener\n                title={'Who tagged this post?'}\n                enterDelay={350}\n            >\n                <RecordVoiceOverOutlinedIcon\n                    className={classes.button}\n                    onClick={handleClick}\n                />\n            </Tooltip>\n            {\n                anchorEl &&\n                <Popover\n                    open={true}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center'\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center'\n                    }}\n                >\n                    <List className={classes.list} subheader={<li/>}>\n                        {Object.keys(data).map(tag => (\n                            <li key={`section-${tag}`} className={classes.li}>\n                                <ul className={classes.ul}>\n                                    <ListSubheader className={classes.bgColor}\n                                                   style={{color: colorByTag[tag]}}>{tag}</ListSubheader>\n                                    {data[tag].map(username => (\n                                        <ListItem key={`item-${tag}-${username}`}>\n                                            <ListItemText primary={username}/>\n                                        </ListItem>\n                                    ))}\n                                </ul>\n                            </li>\n                        ))}\n                    </List>\n                </Popover>\n            }\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        width: 18,\n        height: 18,\n        marginTop: 1,\n        cursor: 'pointer',\n        color: '#fff'\n    },\n    list: {\n        width: '100%',\n        maxWidth: 400,\n        backgroundColor: theme.palette.background.paper,\n        position: 'relative',\n        overflow: 'auto',\n        maxHeight: 300\n    },\n    li: {\n        backgroundColor: 'inherit'\n    },\n    ul: {\n        backgroundColor: 'inherit',\n        padding: 0\n    }\n}))\n\nexport default WhoTaggedButton\n","import React, {useContext, useEffect, useMemo, useRef} from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport CloseIcon from '@material-ui/icons/Close'\nimport StarIcon from '@material-ui/icons/Star'\nimport StarBorderIcon from '@material-ui/icons/StarBorder'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport ReplyIcon from '@material-ui/icons/Reply'\nimport PostExpirationBar from './PostExpirationBar'\nimport PostDate from './PostDate'\nimport PostAuthor from './PostAuthor'\nimport classnames from 'classnames'\nimport ReplyBox from '../replyBox/ReplyBox'\nimport Tags from '../tags/Tags'\nimport TagButton from '../tags/TagButton'\nimport AuthContext from '../context/auth/AuthContext'\nimport FilterContext from '../context/filter/FilterContext'\nimport {makeStyles} from '@material-ui/styles'\nimport PostBody from './PostBody'\nimport VisibilityIcon from '@material-ui/icons/Visibility'\nimport VisibilityIconOff from '@material-ui/icons/VisibilityOff'\nimport WhoTaggedButton from '../tags/WhoTaggedButton'\n\nfunction Post({post, thread, onCollapse, onHide, onPinned, replyBoxOpenForId, onOpenReplyBox, onCloseReplyBox}) {\n    const classes = useStyles()\n    const domElement = useRef(null)\n    const {isLoggedIn} = useContext(AuthContext)\n    const {isPostVisible} = useContext(FilterContext)\n\n    const tagClass = useMemo(() => {\n        if (post.category === 'nuked') {\n            return null\n        } else if (post.category === 'nws') {\n            return 'tagNws'\n        } else if (post.category === 'informative') {\n            return 'tagInformative'\n        } else if (/shacknews/i.test(post.author)) {\n            return 'tagFrontpage'\n        }\n        return null\n    }, [post.category, post.author])\n\n    const isReply = post.parentId > 0\n    const isCollapsed = thread.id === post.id && post.markType === 'collapsed'\n    const replyBorder = isReply ? 'replyBorder' : null\n\n    const handleReplyClick = () => onOpenReplyBox(post.id)\n    const handleHide = () => {\n        onHide(post)\n        onCollapse()\n    }\n\n    // Scroll into view when first visible\n    useEffect(() => {\n        if (isReply) {\n            const rect = domElement.current.getBoundingClientRect()\n            const viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight)\n            const above = rect.bottom < 0\n            const below = rect.top - viewHeight >= 0\n            if (above) {\n                window.scrollTo({\n                    left: 0,\n                    top: domElement.current.offsetTop - 75,\n                    behavior: 'smooth'\n                })\n            } else if (below) {\n                window.scrollTo({\n                    left: 0,\n                    top: domElement.current.offsetTop - viewHeight + rect.height + 24,\n                    behavior: 'smooth'\n                })\n            }\n        }\n    }, [isReply])\n\n    const visible = useMemo(() => isPostVisible(thread, post), [isPostVisible, post, thread])\n    if (!visible) return null\n    return (\n        <React.Fragment>\n            <div ref={domElement}>\n                <Card className={classnames(classes.card, classes[tagClass], classes[replyBorder])}>\n                    <div className={classes.header}>\n                        <PostAuthor post={post} thread={thread}/>\n\n                        <Tags tags={post.lols} variant='post'/>\n\n                        <WhoTaggedButton post={post}/>\n\n                        <span className={classes.flex}/>\n\n                        <PostDate date={post.date}/>\n\n                        {post.parentId === 0 && <PostExpirationBar date={post.date}/>}\n                    </div>\n\n                    <CardContent className={classnames('postbody', classes.content)}>\n                        <PostBody post={post}/>\n                    </CardContent>\n\n                    <CardActions className={classes.actions} disableSpacing>\n                        <Tooltip\n                            disableFocusListener\n                            title={isCollapsed ? 'Uncollapse' : 'Collapse'}\n                            enterDelay={350}\n                        >\n                            <CloseIcon\n                                className={\n                                    classnames(classes.toolbarButton, isCollapsed ? classes.collapsed : null)\n                                }\n                                onClick={onCollapse}\n                            />\n                        </Tooltip>\n\n                        {\n                            thread.id !== post.id && post.markType !== 'collapsed' &&\n                            <Tooltip\n                                disableFocusListener\n                                title='Hide'\n                                enterDelay={350}\n                            >\n                                <VisibilityIcon\n                                    className={classnames(classes.toolbarButton)}\n                                    onClick={handleHide}\n                                />\n                            </Tooltip>\n                        }\n                        {\n                            thread.id !== post.id && post.markType === 'collapsed' &&\n                            <Tooltip\n                                disableFocusListener\n                                title='Unhide'\n                                enterDelay={350}\n                            >\n                                <VisibilityIconOff\n                                    className={classnames(classes.toolbarButton, classes.collapsed)}\n                                    onClick={handleHide}\n                                />\n                            </Tooltip>\n                        }\n                        {\n                            isLoggedIn &&\n                            <Tooltip disableFocusListener title='Reply' enterDelay={350}>\n                                <ReplyIcon className={classes.toolbarButton} onClick={handleReplyClick}/>\n                            </Tooltip>\n                        }\n\n                        {\n                            isLoggedIn && post.parentId === 0 &&\n                            <React.Fragment>\n                                {\n                                    post.markType === 'pinned' &&\n                                    <Tooltip disableFocusListener title='Unpin Thread' enterDelay={350}>\n                                        <StarIcon\n                                            className={classnames(classes.toolbarButton, classes.pinned)}\n                                            onClick={onPinned}\n                                        />\n                                    </Tooltip>\n                                }\n                                {\n                                    post.markType !== 'pinned' &&\n                                    <Tooltip disableFocusListener title='Pin Thread' enterDelay={350}>\n                                        <StarBorderIcon className={classes.toolbarButton} onClick={onPinned}/>\n                                    </Tooltip>\n                                }\n                            </React.Fragment>\n                        }\n\n                        <TagButton postId={post.id} className={classes.toolbarButton}/>\n\n                        <Tooltip disableFocusListener title='View Post @ Shacknews.com' enterDelay={350}>\n                            <a\n                                className={classes.toolbarButton}\n                                target='_blank'\n                                rel=\"noopener noreferrer\"\n                                href={`http://www.shacknews.com/chatty?id=${post.id}#item_${post.id}`}\n                            >\n                                <ExitToAppIcon className={classes.toolbarButton}/>\n                            </a>\n                        </Tooltip>\n                    </CardActions>\n                </Card>\n            </div>\n            {\n                replyBoxOpenForId === post.id &&\n                <ReplyBox parentId={post.id} onCloseReplyBox={onCloseReplyBox} className={classes.replyBox}/>\n            }\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles({\n    card: {\n        backgroundColor: '#202224',\n        borderRadius: 0,\n        marginBottom: 3\n    },\n    replyBorder: {\n        border: '1px solid #656565'\n    },\n    replyBox: {\n        marginTop: -3\n    },\n    tagNws: {\n        borderLeft: '3px solid red !important'\n    },\n    tagInformative: {\n        borderLeft: '3px solid #00bff3 !important'\n    },\n    tagFrontpage: {\n        borderLeft: '3px solid mediumpurple !important'\n    },\n    content: {\n        maxWidth: 'calc(100vw - 32)',\n        color: 'lightgray',\n        fontSize: 13,\n        padding: '8px 16px'\n    },\n    header: {\n        backgroundColor: '#373a3c',\n        padding: '3px 3px 3px 16px',\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    actions: {\n        height: 34,\n        padding: '0 8px 0 8px'\n    },\n    flex: {\n        flex: 1\n    },\n    toolbarButton: {\n        width: 18,\n        height: 18,\n        cursor: 'pointer',\n        color: '#fff',\n        marginRight: 6\n    },\n    collapsed: {\n        color: '#f00 !important'\n    },\n    pinned: {\n        color: '#fcbf20 !important'\n    }\n})\n\nexport default Post\n","export const cleanAllStyles = body => body.replace(/(<[^>]+>)/gm, '')\nexport const cleanMostStyles = body => body.replace(/(<(?!span)(?!\\/span)[^>]+>| tabindex=\"1\")/gm, ' ')\n\nexport const getSnippet = body => {\n    const input = cleanMostStyles(body)\n    const maxLength = 106\n\n    let i = 0\n    let len = 0\n    let tag = false\n    let char = false\n    while (i < input.length && len < maxLength) {\n        if (input[i] === '<') {\n            tag = true\n        } else if (input[i] === '>') {\n            tag = false\n        } else if (input[i] === '&') {\n            char = true\n        } else if (input[i] === '' && char) {\n            char = false\n            len++\n        } else if (!tag) {\n            len++\n        }\n\n        i++\n    }\n\n    let output = input.slice(0, i).trim()\n    if (i < input.length || !output) {\n        output += '...'\n    }\n\n    return output\n}\n","import React, {useContext, useMemo} from 'react'\nimport PostAuthor from './PostAuthor'\nimport classnames from 'classnames'\nimport Tags from '../tags/Tags'\nimport {makeStyles} from '@material-ui/styles'\nimport {getSnippet} from '../util/bodyUtils'\nimport FilterContext from '../context/filter/FilterContext'\n\nfunction OneLine({post, thread, onExpandReply}) {\n    const classes = useStyles()\n    const {isPostVisible} = useContext(FilterContext)\n\n    const lineClass = `oneline${post.recentReplyNumber || 9}`\n    const oneline = useMemo(() => getSnippet(post.body), [post.body])\n\n    const visible = useMemo(() => isPostVisible(thread, post), [isPostVisible, post, thread])\n    if (!visible) return null\n    return (\n        <div className={classes.container}>\n            <span\n                className={classnames(classes.oneline, classes[lineClass])}\n                dangerouslySetInnerHTML={{__html: oneline}}\n                onClick={() => onExpandReply(post.id)}\n            />\n            <Tags tags={post.lols} variant='oneline'/>\n            <PostAuthor post={post} thread={thread}/>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    separator: {\n        padding: '0 3px',\n        fontSize: 11,\n        color: '#fff'\n    },\n    oneline: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        '&:hover': {\n            color: '#fff',\n            backgroundColor: '#233548',\n            cursor: 'pointer'\n        }\n    },\n    oneline10: {\n        color: '#777'\n    },\n    oneline9: {\n        color: '#888'\n    },\n    oneline8: {\n        color: '#999'\n    },\n    oneline7: {\n        color: '#aaa'\n    },\n    oneline6: {\n        color: '#bbb'\n    },\n    oneline5: {\n        color: '#ccc'\n    },\n    oneline4: {\n        color: '#ddd'\n    },\n    oneline3: {\n        color: '#eee'\n    },\n    oneline2: {\n        color: '#fff'\n    },\n    oneline1: {\n        color: '#eee',\n        fontWeight: 'bold'\n    }\n})\n\nexport default OneLine\n","import React, {useContext, useMemo} from 'react'\nimport Post from './Post'\nimport OneLine from './OneLine'\nimport classnames from 'classnames'\nimport FilterContext from '../context/filter/FilterContext'\n\nfunction Comments({className, thread = {}, parent = thread, onHide, onCollapseReply, onExpandReply, onOpenReplyBox, expandedReplyId, replyBoxOpenForId, onCloseReplyBox}) {\n    const {isPostVisible} = useContext(FilterContext)\n\n    const comments = useMemo(() => {\n        return thread.posts\n            .filter(post => post.parentId === parent.id)\n            .filter(post => isPostVisible(thread, post))\n    }, [isPostVisible, parent.id, thread])\n\n    return (\n        <ul className={classnames('comments', className)}>\n            {\n                comments.map(post =>\n                    <li key={post.id}>\n                        {\n                            expandedReplyId === post.id\n                                ? <Post\n                                    post={post}\n                                    thread={thread}\n                                    onHide={onHide}\n                                    onCollapse={onCollapseReply}\n                                    replyBoxOpenForId={replyBoxOpenForId}\n                                    onOpenReplyBox={onOpenReplyBox}\n                                    onCloseReplyBox={onCloseReplyBox}\n                                />\n                                : <OneLine\n                                    post={post}\n                                    thread={thread}\n                                    onExpandReply={onExpandReply}\n                                />\n                        }\n                        <Comments\n                            thread={thread}\n                            parent={post}\n                            expandedReplyId={expandedReplyId}\n                            replyBoxOpenForId={replyBoxOpenForId}\n                            onExpandReply={onExpandReply}\n                            onHide={onHide}\n                            onCollapseReply={onCollapseReply}\n                            onOpenReplyBox={onOpenReplyBox}\n                            onCloseReplyBox={onCloseReplyBox}\n                        />\n                    </li>\n                )\n            }\n        </ul>\n    )\n}\n\nexport default Comments\n","import React, {useCallback, useContext, useMemo, useState} from 'react'\nimport Post from './Post'\nimport Comments from './Comments'\nimport FilterContext from '../context/filter/FilterContext'\nimport {makeStyles} from '@material-ui/styles'\nimport fetchJson from '../util/fetchJson'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction Thread({thread: rawThread}) {\n    const classes = useStyles()\n    const [expandedReplyId, setExpandedReplyId] = useState(null)\n    const [replyBoxOpenForId, setReplyBoxOpenForId] = useState(null)\n    const [markType, setMarkType] = useState(rawThread.markType)\n    const {username, isLoggedIn} = useContext(AuthContext)\n    const {isPostVisible} = useContext(FilterContext)\n    const [revision, setRevision] = useState(0)\n    const thread = useMemo(() => {\n        const posts = rawThread.posts ? rawThread.posts : []\n\n        // oneline highlights\n        posts.slice(-10)\n            .reverse()\n            .forEach((post, index) => post.recentReplyNumber = index + 1)\n\n        const [post] = posts\n        return {\n            ...rawThread,\n            ...post,\n            id: +rawThread.threadId,\n            posts,\n            markType,\n            revision\n        }\n    }, [rawThread, markType, revision])\n    const visibleReplyCount = useMemo(() => {\n        const visiblePosts = thread.posts\n            .filter(post => isPostVisible(thread, post))\n            .sort((a, b) => a.id - b.id)\n        const visiblePostIds = visiblePosts\n            .reduce((acc, post) => ({...acc, [post.id]: !!acc[post.parentId]}), {0: true})\n        return visiblePosts.reduce((acc, post) => acc + (visiblePostIds[post.parentId] ? 1 : 0), 0) - 1\n    }, [isPostVisible, thread])\n    const [truncated, setTruncated] = useState(visibleReplyCount > 20)\n\n    const markPost = useCallback(async (post, type) => {\n        post.markType = type\n        setRevision(revision + 1)\n        const postId = post.id || post.threadId\n        if (isLoggedIn) {\n            try {\n                await fetchJson('clientData/markPost', {\n                    method: 'POST',\n                    body: {username, postId, type}\n                })\n            } catch (ex) {\n                console.error('Error marking post.', ex)\n            }\n        }\n    }, [isLoggedIn, revision, username])\n    const markThread = useCallback(async type => {\n        setMarkType(type)\n        markPost(thread, type)\n    }, [markPost, thread])\n\n    const handleExpandReply = useCallback(expandedReplyId => {\n        setExpandedReplyId(expandedReplyId)\n        setReplyBoxOpenForId(null)\n        setTruncated(false)\n    }, [])\n    const handleCollapseReply = useCallback(() => {\n        setExpandedReplyId(null)\n        setReplyBoxOpenForId(null)\n    }, [])\n    const handleOpenReplyBox = useCallback(id => setReplyBoxOpenForId(id), [])\n    const handleCloseReplyBox = useCallback(() => setReplyBoxOpenForId(null), [])\n\n    const handleHide = useCallback(post => markPost(post, post.markType !== 'collapsed' ? 'collapsed' : 'unmarked'), [markPost])\n    const handleCollapse = useCallback(() => markThread(thread.markType !== 'collapsed' ? 'collapsed' : 'unmarked'), [markThread, thread.markType])\n    const togglePinned = useCallback(() => markThread(thread.markType !== 'pinned' ? 'pinned' : 'unmarked'), [markThread, thread.markType])\n\n    const visible = useMemo(() => isPostVisible(thread), [isPostVisible, thread])\n    if (!visible) return null\n    return (\n        <div className={classes.thread}>\n            <Post\n                post={thread}\n                thread={thread}\n                replyBoxOpenForId={replyBoxOpenForId}\n                onCollapse={handleCollapse}\n                onOpenReplyBox={handleOpenReplyBox}\n                onCloseReplyBox={handleCloseReplyBox}\n                onPinned={togglePinned}\n            />\n\n            {\n                truncated &&\n                <div className={classes.truncatedMessage} onClick={() => setTruncated(false)}>\n                    Thread truncated. Click to see all&nbsp;\n                    <span className={classes.replyCount}>{visibleReplyCount}</span>\n                    &nbsp;replies.\n                </div>\n            }\n\n            <div className={truncated ? classes.truncatedContainer : null}>\n                <Comments\n                    className={truncated ? classes.truncatedComments : null}\n                    thread={thread}\n                    expandedReplyId={expandedReplyId}\n                    replyBoxOpenForId={replyBoxOpenForId}\n                    onExpandReply={handleExpandReply}\n                    onHide={handleHide}\n                    onCollapseReply={handleCollapseReply}\n                    onOpenReplyBox={handleOpenReplyBox}\n                    onCloseReplyBox={handleCloseReplyBox}\n                />\n            </div>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    thread: {\n        marginBottom: 15\n    },\n    truncatedMessage: {\n        color: '#fff',\n        fontWeight: 'bold',\n        borderTop: '1px solid #656565',\n        borderBottom: '1px dotted #fff',\n        backgroundColor: '#181818',\n        cursor: 'pointer',\n        marginTop: -3,\n        '&:hover': {\n            backgroundColor: '#282828'\n        }\n    },\n    replyCount: {\n        color: '#00bff3'\n    },\n    truncatedContainer: {\n        height: 300,\n        overflow: 'hidden',\n        position: 'relative'\n    },\n    truncatedComments: {\n        position: 'absolute !important',\n        bottom: 0\n    }\n})\n\nexport default React.memo(Thread)\n","import React, {useContext} from 'react'\nimport Thread from '../thread/Thread'\nimport ChattyContext from '../context/chatty/ChattyContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction Chatty() {\n    const classes = useStyles()\n    const {threads} = useContext(ChattyContext)\n    return (\n        <div className={classes.chatty}>\n            {threads.map(thread => <Thread key={thread.threadId} thread={thread}/>)}\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    chatty: {\n        margin: '56px 8px 8px 8px',\n        font: '12px/1.5 arial, helvetica, clean, sans-serif'\n    }\n})\n\nexport default Chatty\n","import React from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport Nav from '../nav/Nav'\nimport Chatty from '../chatty/Chatty'\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <Nav/>\n            <Switch>\n                <Route path=\"/chatty\" component={Chatty}/>\n\n                <Route component={Chatty}/>\n            </Switch>\n        </React.Fragment>\n    )\n}\n\nexport default App\n","import React, {useCallback, useContext, useMemo, useState} from 'react'\nimport AuthContext from './AuthContext'\nimport fetchJson from '../../util/fetchJson'\nimport IndicatorContext from '../indicators/IndicatorContext'\n\nfunction AuthProvider({children}) {\n    const {setLoading, showSnackbar} = useContext(IndicatorContext)\n    const [credentials, setCredentials] = useState(() => {\n        try {\n            const storageValue = localStorage.getItem('auth') || '{}'\n            const {username, password} = JSON.parse(storageValue) || {}\n            return {username, password}\n        } catch (ex) {\n            console.log('Invalid storage value: auth', ex)\n            localStorage.removeItem('auth')\n            return {username: null, password: null}\n        }\n    })\n\n    const login = useCallback(async (username, password) => {\n        try {\n            setLoading('async')\n\n            const result = await fetchJson(`verifyCredentials`, {method: 'POST', body: {username, password}})\n\n            if (result.isValid) {\n                localStorage.setItem('auth', JSON.stringify({username, password}))\n                setCredentials({username, password})\n            } else {\n                console.log('Invalid login credentials.')\n                showSnackbar('Invalid username/password. Please check them and try again', {variant: 'error'})\n            }\n        } catch (ex) {\n            console.log('Error while logging in', ex)\n            showSnackbar('Error while logging in. Please try again later.', {variant: 'error'})\n        } finally {\n            setLoading(false)\n        }\n    }, [setLoading, showSnackbar])\n\n    const logout = useCallback(() => {\n        localStorage.removeItem('auth')\n        setCredentials({username: null, password: null})\n    }, [])\n\n    const isLoggedIn = credentials.username && credentials.password\n    const contextValue = useMemo(() => ({\n        ...credentials, \n        isLoggedIn, \n        login, \n        logout\n    }), [credentials, isLoggedIn, login, logout])\n\n    return (\n        <AuthContext.Provider value={contextValue}>\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider\n","import React, {useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react'\nimport ChattyContext from './ChattyContext'\nimport fetchJson from '../../util/fetchJson'\nimport AuthContext from '../auth/AuthContext'\nimport IndicatorContext from '../indicators/IndicatorContext'\nimport subHours from 'date-fns/subHours'\nimport isBefore from 'date-fns/isBefore'\nimport parseISO from 'date-fns/parseISO'\n\nfunction ChattyProvider({children}) {\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const {setLoading, showSnackbar} = useContext(IndicatorContext)\n    const chattyRef = useRef({\n        lastUsername: username,\n        threads: [],\n        newThreads: []\n    })\n    const [chattyValue, setChattyValue] = useState(chattyRef.current)\n    const [lastEventId, setLastEventId] = useState(0)\n\n    const getMarkedPosts = useCallback(async () => {\n        if (isLoggedIn) {\n            const {markedPosts} = await fetchJson(`clientData/getMarkedPosts?username=${encodeURIComponent(username)}`)\n            return markedPosts\n        }\n        return []\n    }, [isLoggedIn, username])\n\n    const updateThreads = useCallback(async (freshThreads = false, freshMarkedPosts = false, includeNewThreads = false) => {\n        // fresh chatty load from server\n        let {threads: nextThreads} = freshThreads ? await getChatty() : {}\n\n        // process marked posts if needed\n        const markedPosts = freshMarkedPosts ? await getMarkedPosts() : null\n\n        // compile new thread state\n        nextThreads = nextThreads || chattyRef.current.threads\n\n        // only add in new threads when needed\n        nextThreads = includeNewThreads ? chattyRef.current.newThreads.concat(nextThreads) : nextThreads\n        const nextNewThreads = includeNewThreads ? [] : chattyRef.current.newThreads\n\n        // if we're loading marked posts, process the data\n        if (markedPosts) {\n            const markedPostsById = markedPosts\n                .reduce((acc, post) => ({\n                    ...acc,\n                    [post.id]: post.type\n                }), {})\n\n            // update post markings\n            nextThreads = nextThreads\n                .map(thread => ({\n                    ...{\n                        ...thread,\n                        posts: thread.posts\n                            .map(post => ({\n                                ...post,\n                                markType: markedPostsById[post.id] || 'unmarked'\n                            }))\n                    },\n                    markType: markedPostsById[thread.threadId] || 'unmarked'\n                }))\n        }\n\n        // order by recent activity\n        let maxPostIdByThread = nextThreads\n            .reduce((acc, thread) => {\n                acc[thread.threadId] = thread.posts.reduce((acc, post) => Math.max(post.id, acc), 0)\n                return acc\n            }, {})\n\n        // remove expired threads\n        const expireDate = subHours(Date.now(), 18)\n        nextThreads = nextThreads.filter(thread => {\n            const threadId = +thread.threadId\n            const post = thread.posts.find(post => post.id === threadId)\n            const parsed = parseISO(post.date)\n            return isBefore(expireDate, parsed)\n        })\n\n        // sort by activity, pinned first\n        nextThreads = nextThreads\n            .sort((a, b) => maxPostIdByThread[b.threadId] - maxPostIdByThread[a.threadId])\n            .sort((a, b) => a.markType === 'pinned' ? -1 : (b.markType === 'pinned' ? 1 : 0))\n\n        // update state to trigger render\n        chattyRef.current.threads = nextThreads\n        chattyRef.current.newThreads = nextNewThreads\n\n        // clean up any old posts after loading, doesn't impact state\n        if (markedPosts) {\n            let ids = markedPosts\n                .filter(markedPost => {\n                    return !nextThreads.some(thread => {\n                        return thread.posts.find(post => post.id === markedPost.id)\n                    })\n                })\n                .map(({id}) => id)\n            if (ids.length) {\n                try {\n                    ids.reduce(async (acc, id) => {\n                        await acc\n                        return fetchJson('clientData/markPost', {\n                            method: 'POST',\n                            body: {username, postId: id, type: 'unmarked'}\n                        })\n                    }, Promise.resolve())\n                } catch (ex) {\n                    console.error('Error unmarking old posts.', ex)\n                }\n            }\n        }\n\n        setChattyValue({...chattyRef.current})\n    }, [getMarkedPosts, username])\n\n    const getChatty = async threadCount => {\n        return await fetchJson(`getChatty${threadCount > 0 ? `?count=${threadCount}` : ''}`)\n    }\n\n    const handleEvent = (event = {}) => {\n        const {eventType, eventData} = event\n\n        if (eventType === 'newPost') {\n            const {post} = eventData\n            if (post.parentId) {\n                const addReply = thread => {\n                    if (thread.threadId === post.threadId) {\n                        const found = thread.posts.find(p => p.id === post.id)\n                        if (!found) {\n                            return {\n                                ...thread,\n                                posts: [\n                                    ...thread.posts,\n                                    post\n                                ]\n                            }\n                        }\n                    }\n                    return thread\n                }\n\n                chattyRef.current.threads = chattyRef.current.threads.map(addReply)\n                chattyRef.current.newThreads = chattyRef.current.newThreads.map(addReply)\n            } else {\n                const found = chattyRef.current.threads.find(t => t.threadId === post.id) ||\n                    chattyRef.current.newThreads.find(t => t.threadId === post.id)\n                if (!found) {\n                    chattyRef.current.newThreads = [\n                        ...chattyRef.current.newThreads,\n                        {\n                            threadId: post.id,\n                            posts: [\n                                post\n                            ]\n                        }\n                    ]\n                }\n            }\n        } else if (eventType === 'categoryChange') {\n            const {postId, category} = eventData\n            const updateCategory = thread => {\n                const threadContainsUpdate = thread.posts.find(post => post.id === postId)\n                if (threadContainsUpdate) {\n                    const posts = thread.posts\n                        .map(post => {\n                            if (post.id === postId) {\n                                return {...post, category}\n                            }\n                            return post\n                        })\n                    return {...thread, posts}\n                }\n                return thread\n            }\n\n            chattyRef.current.threads = chattyRef.current.threads.map(updateCategory)\n            chattyRef.current.newThreads = chattyRef.current.newThreads.map(updateCategory)\n        } else if (eventType === 'lolCountsUpdate') {\n            const {updates} = eventData\n            const updatedPostsById = updates\n                .reduce(((acc, {postId, tag, count}) => ({\n                    ...acc,\n                    [postId]: {tag, count}\n                })), {})\n            const updateTags = thread => {\n                const threadContainsUpdate = thread.posts.find(post => updatedPostsById[post.id])\n                if (threadContainsUpdate) {\n                    const posts = thread.posts\n                        .map(post => {\n                            const updated = updatedPostsById[post.id]\n                            if (updated) {\n                                const lols = (post.lols || [])\n                                    .filter(tag => tag.tag !== updated.tag)\n                                    .concat([updated])\n                                return {...post, lols}\n                            }\n                            return post\n                        })\n                    return {...thread, posts}\n                }\n                return thread\n            }\n\n            chattyRef.current.threads = chattyRef.current.threads.map(updateTags)\n            chattyRef.current.newThreads = chattyRef.current.newThreads.map(updateTags)\n        } else {\n            console.debug('Unhandled event type:', event)\n        }\n    }\n\n    // full load of chatty on start and when required\n    useEffect(() => {\n        const fullReload = async () => {\n            try {\n                setLoading('async')\n\n                const {eventId} = await fetchJson('getNewestEventId')\n                await updateThreads(true, true, false)\n                setLastEventId(eventId)\n            } catch (ex) {\n                showSnackbar('Error loading chatty. Content may not be current.', {variant: 'error'})\n                console.error('Exception while doing full reload.', ex)\n                setTimeout(() => fullReload(), 30000)\n            } finally {\n                setLoading(false)\n            }\n        }\n        if (lastEventId === 0) {\n            chattyRef.current.threads = []\n            chattyRef.current.newThreads = []\n            fullReload()\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [lastEventId])\n\n    // wait for and handle events\n    useEffect(() => {\n        let mounted = true\n        const waitForEvent = async () => {\n            if (mounted && lastEventId) {\n                try {\n                    const {lastEventId: newerEventId, events, error} = await fetchJson(`waitForEvent?lastEventId=${lastEventId}`)\n\n                    if (mounted) {\n                        if (!error) {\n                            if (newerEventId > lastEventId) {\n                                events.forEach(event => handleEvent(event))\n                                setLastEventId(newerEventId)\n                                setChattyValue({...chattyRef.current})\n                            } else {\n                                // No changes\n                                return waitForEvent(lastEventId)\n                            }\n                        } else {\n                            console.error('Error from API:waitForLastEvent call.', error)\n                            showSnackbar('Error receiving events. Reloading full chatty.', {variant: 'error'})\n                            setLastEventId(0)\n                        }\n                    }\n                } catch (ex) {\n                    showSnackbar('Error receiving events. Reloading full chatty.', {variant: 'error'})\n                    console.error('Exception from API:waitForLastEvent call.', ex)\n                    setLastEventId(0)\n                }\n            }\n        }\n\n        waitForEvent(lastEventId)\n        return () => mounted = false\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [lastEventId])\n\n    // reload things when logged in user changes\n    useEffect(() => {\n        const refreshForNewUser = async () => {\n            chattyRef.current.lastUsername = username\n\n            try {\n                setLoading('async')\n                setChattyValue({threads: [], newThreads: []})\n                await updateThreads(true, true, true)\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        if (username !== chattyRef.current.lastUsername) {\n            refreshForNewUser()\n        }\n    }, [username, setLoading, updateThreads])\n\n    const refreshChatty = useCallback(() => updateThreads(false, false, true), [updateThreads])\n\n    const contextValue = useMemo(() => ({\n        ...chattyValue,\n        refreshChatty\n    }), [chattyValue, refreshChatty])\n\n    return (\n        <ChattyContext.Provider value={contextValue}>\n            {children}\n        </ChattyContext.Provider>\n    )\n}\n\nexport default ChattyProvider\n","import React from 'react'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction AsyncLoadingIndicator({loading}) {\n    const classes = useStyles()\n    if (loading !== 'async') return null\n    return <LinearProgress className={classes.progress} color='secondary'/>\n}\n\nconst useStyles = makeStyles({\n    progress: {\n        zIndex: 9999,\n        position: 'fixed',\n        top: 0,\n        width: '100vw'\n    }\n})\n\nexport default AsyncLoadingIndicator\n","import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction SyncLoadingIndicator({loading}) {\n    const classes = useStyles()\n    if (loading !== 'sync') return null\n    return (\n        <div className={classes.container}>\n            <CircularProgress\n                className={classes.progress}\n                size={60}\n                thickness={4}\n                color='secondary'\n            />\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    container: {\n        zIndex: 99999,\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.2)'\n    },\n    progress: {\n        position: 'absolute',\n        top: 'calc(50% - 60px)',\n        left: 'calc(50% - 60px)'\n    }\n})\n\nexport default SyncLoadingIndicator\n","import React, {useMemo, useState} from 'react'\nimport IndicatorContext from './IndicatorContext'\nimport AsyncLoadingIndicator from './AsyncLoadingIndicator'\nimport SyncLoadingIndicator from './SyncLoadingIndicator'\nimport {useSnackbar} from 'notistack'\n\nfunction IndicatorProvider({children}) {\n    const [loading, setLoading] = useState(false)\n    const {enqueueSnackbar} = useSnackbar()\n\n    const contextValue = useMemo(() => ({\n        setLoading,\n        showSnackbar: enqueueSnackbar\n    }), [enqueueSnackbar])\n\n    return (\n        <IndicatorContext.Provider value={contextValue}>\n            <SyncLoadingIndicator loading={loading}/>\n            <AsyncLoadingIndicator loading={loading}/>\n            {children}\n        </IndicatorContext.Provider>\n    )\n}\n\nexport default IndicatorProvider\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useCallback, useContext, useEffect, useState, useMemo} from 'react'\nimport FilterContext from './FilterContext'\nimport ClientDataContext from '../clientData/ClientDataContext'\nimport IndicatorContext from '../indicators/IndicatorContext'\nimport {cleanAllStyles} from '../../util/bodyUtils'\n\nfunction FilterProvider({children}) {\n    const {clientData, updateClientData} = useContext(ClientDataContext)\n    const [filterSettings, setFilterSettings] = useState(defaultSettings)\n    const {showSnackbar} = useContext(IndicatorContext)\n\n    const updateCloudFilterSettings = useCallback(async cloudFilterSettings => {\n        try {\n            await updateClientData('filterSettings', cloudFilterSettings)\n        } catch (err) {\n            console.error('Error updating clientData.filterSettings.')\n            showSnackbar('Error updating filter settings, changes may have been lost.', {variant: 'error'})\n        }\n    }, [showSnackbar, updateClientData])\n\n    useEffect(() => {\n        try {\n            if (clientData && clientData.filterSettings) {\n                const {filterSettings: cloudFilterSettings} = clientData\n                const whichValue = (prop, otherwise) => {\n                    return cloudFilterSettings.hasOwnProperty(prop)\n                        ? cloudFilterSettings[prop] || otherwise\n                        : otherwise\n                }\n                setFilterSettings({\n                    filteredTerms: (whichValue('filteredTerms', []))\n                        .map(text => ({text, regex: new RegExp(text, 'mi')})),\n                    filteredUsers: (whichValue('filteredUsers', []))\n                        .map(text => ({text, regex: new RegExp(text, 'mi')})),\n                    showCollapsed: !!whichValue('showCollapsed', false),\n                    showFilteredTerms: !!whichValue('showFilteredTerms', false),\n                    showFilteredUsers: !!whichValue('showFilteredUsers', false),\n                    showNotWorkSafePosts: !!whichValue('showNotWorkSafePosts', true),\n                    showStupidPosts: !!whichValue('showStupidPosts', true),\n                    showOfftopicPosts: !!whichValue('showOfftopicPosts', true),\n                    showPoliticalReligiousPosts: !!whichValue('showPoliticalReligiousPosts', true),\n                    showCortexPosts: !!whichValue('showCortexPosts', true)\n                })\n            }\n        } catch (ex) {\n            console.error('Error parsing clientData.filterSettings, resetting to default.')\n            showSnackbar('Error loading filter settings, resetting to default.', {variant: 'error'})\n            updateCloudFilterSettings(defaultSettings)\n            setFilterSettings(defaultSettings)\n        }\n    }, [clientData, showSnackbar, updateCloudFilterSettings])\n\n    const isPostVisible = useCallback((thread, post = thread) => {\n        const {\n            showCollapsed,\n            showFilteredUsers,\n            filteredUsers,\n            showFilteredTerms,\n            filteredTerms,\n            showNotWorkSafePosts,\n            showStupidPosts,\n            showOfftopicPosts,\n            showPoliticalReligiousPosts,\n            showCortexPosts\n        } = filterSettings\n\n        if (!showCollapsed && thread.markType === 'collapsed') return false\n        else if (!showCollapsed && post.markType === 'collapsed') return false\n        else if (!showFilteredUsers && filteredUsers.some(({regex}) => regex.test(post.author))) return false\n        else if (!showFilteredTerms && filteredTerms.some(({regex}) => regex.test(cleanAllStyles(post.body)))) return false\n        else if (!showNotWorkSafePosts && post.category === 'nws') return false\n        else if (!showStupidPosts && post.category === 'stupid') return false\n        else if (!showOfftopicPosts && post.category === 'tangent') return false\n        else if (!showPoliticalReligiousPosts && post.category === 'political') return false\n        else if (!showCortexPosts && post.isCortex) return false\n\n        return true\n    }, [filterSettings])\n\n    const updateFilterSettings = useCallback(async updatedSettings => {\n        const newFilterSettings = {...filterSettings, ...updatedSettings}\n        const cloudFilterSettings = {\n            ...newFilterSettings,\n            filteredTerms: newFilterSettings.filteredTerms.map(item => item.text),\n            filteredUsers: newFilterSettings.filteredUsers.map(item => item.text)\n        }\n\n        updateCloudFilterSettings(cloudFilterSettings)\n        setFilterSettings(newFilterSettings)\n    }, [filterSettings, updateCloudFilterSettings])\n\n    const contextValue = useMemo(() => ({\n        filterSettings,\n        updateFilterSettings,\n        isPostVisible\n    }), [filterSettings, isPostVisible, updateFilterSettings])\n\n    return (\n        <FilterContext.Provider value={contextValue}>\n            {children}\n        </FilterContext.Provider>\n    )\n}\n\nconst defaultSettings = {\n    filteredTerms: [],\n    filteredUsers: [],\n    showCollapsed: false,\n    showFilteredTerms: false,\n    showNotWorkSafePosts: true,\n    showStupidPosts: true,\n    showOfftopicPosts: true,\n    showPoliticalReligiousPosts: true,\n    showCortexPosts: true\n}\n\nexport default FilterProvider\n","import * as history from 'history'\nexport default history.createBrowserHistory({})\n","import React, {useCallback, useContext, useEffect, useState, useMemo} from 'react'\nimport ClientDataContext from './ClientDataContext'\nimport fetchJson from '../../util/fetchJson'\nimport AuthContext from '../auth/AuthContext'\nimport querystring from 'querystring'\nimport IndicatorContext from '../indicators/IndicatorContext'\n\nfunction ClientDataProvider({children}) {\n    const [clientData, setClientData] = useState({})\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const {showSnackbar} = useContext(IndicatorContext)\n\n    const updateClientData = useCallback(async (key, value) => {\n        try {\n            const newClientData = {\n                ...clientData\n            }\n            if (key) newClientData[key] = value\n            const data = JSON.stringify(newClientData)\n            const body = {client, username: encodeURIComponent(username), data}\n            const result = await fetchJson(`clientData/setClientData`, {method: 'POST', body})\n            if (result.error) {\n                showSnackbar('Error updating user preferences.', {variant: 'error'})\n                console.error('Error setting client data', result)\n            }\n        } catch (ex) {\n            showSnackbar('Error updating user preferences.', {variant: 'error'})\n            console.error('Error setting client data', ex)\n        }\n    }, [clientData, showSnackbar, username])\n    \n    useEffect(() => {\n        const loadClientData = async () => {\n            if (isLoggedIn) {\n                try {\n                    const params = querystring.stringify({client, username: encodeURIComponent(username)})\n                    const {data} = await fetchJson(`clientData/getClientData?${params}`)\n                    const newClientData = JSON.parse(data || '{}')\n                    setClientData(newClientData)\n                } catch (ex) {\n                    showSnackbar('Error loading user preferences.', {variant: 'error'})\n                    console.error('Error loading client data', ex)\n                    setClientData({})\n                    // TODO: Reset client data in cloud?\n                }\n            } else {\n                setClientData({})\n            }\n        }\n        \n        loadClientData()\n    }, [isLoggedIn, showSnackbar, username])\n\n    const contextValue = useMemo(() => ({\n        clientData,\n        updateClientData\n    }), [clientData, updateClientData])\n\n    if (isLoggedIn && !clientData) return null\n    return (\n        <ClientDataContext.Provider value={contextValue}>\n            {children}\n        </ClientDataContext.Provider>\n    )\n}\n\nconst client = 'nixxedchatty'\n\nexport default ClientDataProvider\n","import React from 'react'\nimport {ThemeProvider} from '@material-ui/styles'\nimport Theme from './Theme'\nimport App from './App'\nimport AuthProvider from '../context/auth/AuthProvider'\nimport ChattyProvider from '../context/chatty/ChattyProvider'\nimport './global.css'\nimport './shacktags.css'\nimport './comment_tree.css'\nimport IndicatorProvider from '../context/indicators/IndicatorProvider'\nimport FilterProvider from '../context/filter/FilterProvider'\nimport {Router} from 'react-router-dom'\nimport history from '../history'\nimport ClientDataProvider from '../context/clientData/ClientDataProvider'\nimport {SnackbarProvider} from 'notistack'\n\nfunction Root() {\n    return (\n        <Router history={history}>\n            <ThemeProvider theme={Theme}>\n                <SnackbarProvider>\n                    <IndicatorProvider>\n                        <AuthProvider>\n                            <ClientDataProvider>\n                                <FilterProvider>\n                                    <ChattyProvider>\n                                        <App/>\n                                    </ChattyProvider>\n                                </FilterProvider>\n                            </ClientDataProvider>\n                        </AuthProvider>\n                    </IndicatorProvider>\n                </SnackbarProvider>\n            </ThemeProvider>\n        </Router>\n    )\n}\n\nexport default Root\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Root from './app/Root'\n\nconst render = Component => ReactDOM.render(<Component/>, document.getElementById('root'))\n\nrender(Root)\n\nif (module.hot) {\n    module.hot.accept('./app/Root', () => {\n        const next = require('./app/Root').default\n        render(next)\n    })\n}\n"],"sourceRoot":""}